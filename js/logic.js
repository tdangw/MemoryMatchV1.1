// logic.js - X·ª≠ l√Ω logic c·ªßa tr√≤ ch∆°i
// ch·ª©c nƒÉng c·ªßa logic.js l√† x·ª≠ l√Ω logic c·ªßa tr√≤ ch∆°i, bao g·ªìm vi·ªác x·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi ch∆°i nh·∫•p v√†o √¥, ki·ªÉm tra xem hai √¥ c√≥ kh·ªõp nhau hay kh√¥ng, v√† ki·ªÉm tra xem ng∆∞·ªùi ch∆°i ƒë√£ ho√†n th√†nh c·∫•p ƒë·ªô hay ch∆∞a. N√≥ c≈©ng bao g·ªìm c√°c ch·ª©c nƒÉng ƒë·ªÉ kh·ªüi t·∫°o logic v√† x·ª≠ l√Ω √¢m thanh khi ng∆∞·ªùi ch∆°i t∆∞∆°ng t√°c v·ªõi tr√≤ ch∆°i.

import { increaseScore, gameState } from './gameState.js';
import { updateScoreDisplay, showTilePointEffect, updateTimerDisplay, highlightTarget } from './ui.js';
import { nextLevel } from './main.js';
import { startFireworkShow, triggerVictoryFireworks } from './fireworkEffect.js';
import { sounds } from './sound.js'; // üì¶ T√°ch √¢m thanh

let selectedTiles = [];

/**
 * Kh·ªüi t·∫°o logic v√† g√°n s·ª± ki·ªán click cho t·∫•t c·∫£ tile
 */
export function initLogic() {
  const tiles = document.querySelectorAll('.tile');
  tiles.forEach((tile) => {
    tile.onclick = () => handleTileClick(tile);
  });
}

/**
 * X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i click v√†o tile
 */
export function handleTileClick(tileElement) {
  if (gameState.currentLevel > 1 && gameState.isLocked) return;

  const isBonus = tileElement.dataset.isBonus === 'true';
  const imageId = tileElement.dataset.imageId;
  const img = tileElement.querySelector('img');

  // NgƒÉn double click ho·∫∑c click tr√πng
  if (tileElement.classList.contains('matched') || tileElement.classList.contains('selected') || !img) return;

  // üéµ Ph√°t √¢m click n·∫øu b·∫≠t sound
  if (gameState.settings?.sound) {
    sounds.click.currentTime = 0;
    sounds.click.play().catch(() => {});
  }

  img.classList.remove('hidden');
  tileElement.classList.add('selected');

  if (isBonus) {
    const bonusPoints = Math.floor(Math.random() * 100) + 1;
    increaseScore(bonusPoints);
    updateScoreDisplay(gameState.score);
    tileElement.classList.add('matched');

    console.log(`[üéÅ Bonus] +${bonusPoints} ƒëi·ªÉm t·ª´ √¥ l·∫ª ${tileElement.id}`);
    showTilePointEffect(tileElement, `üéØ +${bonusPoints} ƒëi·ªÉm`);

    // ‚úÖ Ch·ªù 0.5 gi√¢y r·ªìi m·ªõi checkLevelComplete
    setTimeout(() => {
      checkLevelComplete();
    }, 500);
  } else {
    selectedTiles.push({ element: tileElement, imageId });
    if (selectedTiles.length === 2) {
      checkMatch();
    }
  }
}

// So kh·ªõp 2 tile ƒë∆∞·ª£c ch·ªçn
function checkMatch() {
  const [first, second] = selectedTiles;

  if (first.imageId === second.imageId) {
    first.element.classList.remove('selected');
    second.element.classList.remove('selected');
    first.element.classList.add('matched');
    second.element.classList.add('matched');

    const matchPoints = 2; // C·ªông ƒëi·ªÉm khi match
    increaseScore(matchPoints);
    updateScoreDisplay(gameState.score);
    showTilePointEffect(second.element, `+${matchPoints} ƒëi·ªÉm`);
    highlightTarget('#score-title');

    if (gameState.settings?.sound) {
      sounds.match.currentTime = 0;
      sounds.match.play().catch(() => {});
    }

    console.log(`[‚úÖ Match] ${first.imageId}`);
    checkLevelComplete();
  } else {
    first.element.classList.add('wrong');
    second.element.classList.add('wrong');
    highlightTarget('#score-title', true);

    if (gameState.settings?.sound) {
      sounds.wrong.currentTime = 0;
      sounds.wrong.play().catch(() => {});
    }

    // ‚ûñ Tr·ª´ ƒëi·ªÉm ho·∫∑c th·ªùi gian n·∫øu ƒëi·ªÉm = 0
    if (gameState.score > 0) {
      const penalty = 1;
      gameState.score = Math.max(0, gameState.score - penalty);
      updateScoreDisplay(gameState.score);
      showTilePointEffect(second.element, `-${penalty} ƒëi·ªÉm`);
    } else {
      // ‚úÖ B·∫Øt ƒë·∫ßu b·∫£o v·ªá th·ªùi gian
      const raw = Number(gameState.remainingTime);
      const currentTime = Number.isFinite(raw) ? raw : 180;
      const newTime = Math.max(0, currentTime - 1);

      gameState.remainingTime = newTime;
      updateTimerDisplay(newTime);
      showTilePointEffect(second.element, '-‚è±Ô∏è1s');
      highlightTarget('#timer', true);
    }

    setTimeout(() => {
      first.element.classList.remove('selected', 'wrong');
      second.element.classList.remove('selected', 'wrong');

      const img1 = first.element.querySelector('img');
      const img2 = second.element.querySelector('img');
      if (img1) img1.classList.add('hidden');
      if (img2) img2.classList.add('hidden');
    }, 800);
  }

  selectedTiles = [];
}

/**
 * Ki·ªÉm tra n·∫øu ƒë√£ matched h·∫øt ‚Üí qua m√†n
 */
export function checkLevelComplete() {
  const allNormalTiles = document.querySelectorAll('.tile:not([data-is-bonus="true"])');
  const matchedNormalTiles = document.querySelectorAll('.tile.matched:not([data-is-bonus="true"])');
  const bonusTile = document.querySelector('.tile[data-is-bonus="true"]');
  const bonusMatched = bonusTile ? bonusTile.classList.contains('matched') : true;

  if (allNormalTiles.length === matchedNormalTiles.length && bonusMatched) {
    if (gameState.settings?.sound) {
      sounds.victory.currentTime = 0;
      sounds.victory.play().catch(() => {});
    }
    // üî• Hi·ªáu ·ª©ng ph√°o hoa Particle ƒë·∫πp m·∫Øt
    triggerVictoryFireworks(3); // ho·∫∑c 2, 4 t√πy c·∫•p ƒë·ªô
    startFireworkShow(3500);
    setTimeout(() => {
      fadeOutGrid(() => {
        showLoadingOverlay(() => {
          nextLevel();
        });
      });
    }, 3500); // 3 gi√¢y ph√°o hoa + 0.5s chu·∫©n b·ªã

    if (gameState.score > (gameState.highScore || 0)) {
      gameState.highScore = gameState.score;
      localStorage.setItem('highScore', gameState.highScore);
    }
  }
}
function fadeOutGrid(callback) {
  const gridContainer = document.getElementById('grid-container');
  if (gridContainer) {
    gridContainer.style.transition = 'opacity 0.6s ease';
    gridContainer.style.opacity = '0';

    setTimeout(() => {
      gridContainer.style.opacity = '1'; // Reset l·∫°i ƒë·ªÉ chu·∫©n b·ªã m√†n m·ªõi
      if (callback) callback();
    }, 600);
  } else if (callback) {
    callback();
  }
}
function showLoadingOverlay(callback) {
  const overlay = document.createElement('div');
  overlay.className = 'loading-overlay';
  overlay.textContent = 'üß© ƒêang chu·∫©n b·ªã m√†n m·ªõi...';

  document.body.appendChild(overlay);

  setTimeout(() => {
    overlay.classList.add('fade-out');
    setTimeout(() => {
      document.body.removeChild(overlay);
      if (callback) callback();
    }, 300);
  }, 1000); // Hi·ªÉn th·ªã loading 1 gi√¢y
}

//

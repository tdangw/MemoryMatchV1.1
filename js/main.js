// main.js - Qu·∫£n l√Ω game ch√≠nh
// Ch·ª©c nƒÉng c·ªßa main.js l√† kh·ªüi t·∫°o game, x·ª≠ l√Ω s·ª± ki·ªán v√† qu·∫£n l√Ω tr·∫°ng th√°i game. N√≥ s·∫Ω g·ªçi c√°c h√†m t·ª´ c√°c module kh√°c ƒë·ªÉ th·ª±c hi·ªán c√°c ch·ª©c nƒÉng c·ª• th·ªÉ nh∆∞ t·∫°o l∆∞·ªõi, x·ª≠ l√Ω √¢m thanh, c·∫≠p nh·∫≠t giao di·ªán ng∆∞·ªùi d√πng, v.v.
import { showDifficultyOverlay, createMainMenu } from './mainmenu.js';
import { getGridSizeByLevel } from './utils.js'; // T√≠nh to√°n k√≠ch th∆∞·ªõc l∆∞·ªõi theo level
import { createGrid } from './grid.js';
import {
  updateLevelDisplay,
  updateScoreDisplay,
  updateHintDisplay,
  updateTimerDisplay,
  showBonusOverlay,
  showLevelRewardOverlay,
  updateHighScoreDisplay,
  showReturnToMenuOverlay,
  showResetConfirmationOverlay,
  highlightTarget,
} from './ui.js';
import { gameState, resetGame, increaseScore } from './gameState.js';
import { checkLevelComplete, initLogic } from './logic.js';
import { showSettingsPanel } from './settings.js';

document.getElementById('btn-game-settings')?.addEventListener('click', () => {
  showSettingsPanel(true); // üëà true = g·ªçi t·ª´ trong game
});

let countdownInterval;

// Load menu & highscore khi kh·ªüi ƒë·ªông
window.onload = () => {
  createMainMenu();
  updateHighScoreDisplay(gameState.highScore);
};

export function initializeLevel(level) {
  console.log(`[üß©INIT] T·∫°o l∆∞·ªõi cho level ${level}`);

  // ‚úÖ T√≠nh k√≠ch th∆∞·ªõc l∆∞·ªõi theo ch·∫ø ƒë·ªô ch∆°i
  const mode = gameState.settings?.mode || 'easy';
  const gridSize = getGridSizeByLevel(level, mode);
  createGrid(gridSize, level);

  const gameContainer = document.getElementById('game-container');
  if (gameContainer) gameContainer.style.display = 'flex';

  updateLevelDisplay(level);
  updateScoreDisplay(gameState.score);
  updateHintDisplay(gameState.hints || 0);
  updateTimerDisplay(gameState.remainingTime);

  const audio = document.getElementById('bg-music');
  if (audio && gameState.settings?.sound && gameState.settings.bgMusic !== 'none') {
    audio.src = `assets/sounds/${gameState.settings.bgMusic}`;
    audio.loop = true;
    audio.volume = 0.5;
    audio.play().catch((err) => console.warn('Kh√¥ng th·ªÉ ph√°t nh·∫°c:', err));
  }

  initLogic();
  startCountdown();

  if (level >= 1) {
    handleLevelReward();
  }
}

// üü¢ Kh·ªüi t·∫°o l∆∞·ªõi theo level

// ‚è≥ ƒê·∫øm ng∆∞·ª£c th·ªùi gian
function startCountdown() {
  clearInterval(countdownInterval);
  countdownInterval = setInterval(() => {
    gameState.remainingTime--;
    updateTimerDisplay(gameState.remainingTime);

    if (gameState.remainingTime <= 0) {
      clearInterval(countdownInterval);
      handleTimeUp();
    }
  }, 1000);
}

function handleTimeUp() {
  gameState.isLocked = true;

  const overlay = document.createElement('div');
  overlay.className = 'overlay fade-in';

  const modal = document.createElement('div');
  modal.className = 'modal slide-down';
  modal.innerHTML = `
    <h2 class="overlay-title glow-text">‚è∞ H·∫øt gi·ªù!</h2>
    <p>B·∫°n ƒë√£ thua! B·∫°n c√≥ mu·ªën ch∆°i l·∫°i kh√¥ng?:</p>
    <div class="button-row" style="margin-top: 20px;">
      <button class="confirm-btn">üîÑ Ch∆°i l·∫°i</button>
      <button class="menu-btn">‚ùå Menu</button> <!-- üëà T√™n class ri√™ng -->
    </div>
  `;

  overlay.appendChild(modal);
  document.body.appendChild(overlay);

  if (gameState.settings?.sound) {
    const audio = document.getElementById('bg-music');
    if (audio) audio.pause();

    import('./sound.js').then(({ sounds }) => {
      sounds.defeat.currentTime = 0;
      sounds.defeat.play().catch(() => {});
    });
  }

  // üîÅ Ch∆°i l·∫°i: ch·ªçn l·∫°i ch·∫ø ƒë·ªô ch∆°i
  modal.querySelector('.confirm-btn').onclick = () => {
    overlay.remove();
    gameState.fromDefeat = true; // ‚úÖ ƒê√°nh d·∫•u ƒëang g·ªçi t·ª´ tr·∫°ng th√°i thua
    showDifficultyOverlay(true); // g·ªçi l·∫°i ch·ªçn ch·∫ø ƒë·ªô ch∆°i
  };

  // ‚ùå Menu: reset v√† quay l·∫°i menu ch√≠nh (class ri√™ng ƒë·ªÉ tr√°nh tr√πng)
  modal.querySelector('.menu-btn').onclick = () => {
    overlay.remove();
    resetGame();

    const gameContainer = document.getElementById('game-container');
    if (gameContainer) gameContainer.style.display = 'none';

    createMainMenu();
  };
}

// üéÅ Th∆∞·ªüng qua m√†n
function handleLevelReward() {
  const hintCount = gameState.hints;
  const level = gameState.currentLevel;
  const remainingTime = gameState.remainingTime;

  let base = 10;
  let levelBonus = level * 2;
  let timeBonus = Math.floor(remainingTime / 10);
  let hintBonus = hintCount * 2;
  let reward = 0;
  let hintGain = 1;
  let extraTime = 30 + Math.floor(level / 5) * 5; // C·ª© m·ªói 5 level tƒÉng th√™m 5s

  if (level === 1) {
    // üéØ N·∫øu l√† Level 1 ‚ûî Ch·ªânh ri√™ng ph·∫ßn th∆∞·ªüng
    base = 0;
    levelBonus = 0;
    timeBonus = 0;
    hintBonus = 0;
    reward = 0; // Kh√¥ng c·ªông ƒëi·ªÉm
    hintGain = 0; // Kh√¥ng c·ªông th√™m l∆∞·ª£t g·ª£i √Ω
    extraTime = 0; // Kh√¥ng c·ªông th√™m th·ªùi gian
  } else {
    reward = base + levelBonus + timeBonus + hintBonus;
  }

  if (reward > 0) {
    increaseScore(reward);
  }
  if (hintGain > 0) {
    gameState.hints += hintGain;
  }
  if (extraTime > 0) {
    gameState.remainingTime += extraTime;
  }

  updateHintDisplay(gameState.hints);
  updateTimerDisplay(gameState.remainingTime);

  showLevelRewardOverlay({ reward, hintGain, timeBonus: extraTime });
}

// Chuy·ªÉn m√†n
export function nextLevel() {
  gameState.currentLevel++;
  console.log(`[üì§ nextLevel()] Chuy·ªÉn sang level ${gameState.currentLevel}`);
  initializeLevel(gameState.currentLevel);
}

// X·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i b·∫•m g·ª£i √Ω
function handleHintClick() {
  if (!gameState.hints || gameState.hints <= 0) {
    showBonusOverlay('üö´ H·∫øt l∆∞·ª£t g·ª£i √Ω!');
    return;
  }

  const tiles = document.querySelectorAll('.tile:not(.matched)');
  const tilePairs = {};

  tiles.forEach((tile) => {
    const imageId = tile.dataset.imageId;
    if (!tilePairs[imageId]) {
      tilePairs[imageId] = [tile];
    } else {
      tilePairs[imageId].push(tile);
    }
  });

  for (let imageId in tilePairs) {
    if (tilePairs[imageId].length >= 2) {
      const [t1, t2] = tilePairs[imageId];
      simulateTileMatch(t1, t2);
      gameState.hints--;
      updateHintDisplay(gameState.hints);
      highlightTarget('#hint-count', true);
      return;
    }
  }

  showBonusOverlay('üòï Kh√¥ng t√¨m th·∫•y c·∫∑p n√†o ƒë·ªÉ g·ª£i √Ω!');
}

// Gi·∫£ l·∫≠p gh√©p ƒë√∫ng
function simulateTileMatch(tile1, tile2) {
  const img1 = tile1.querySelector('img');
  const img2 = tile2.querySelector('img');
  if (img1) img1.classList.remove('hidden');
  if (img2) img2.classList.remove('hidden');

  tile1.classList.add('matched');
  tile2.classList.add('matched');

  increaseScore(1);
  checkLevelComplete();
}

const restartBtn = document.getElementById('btn-restart');
if (restartBtn) {
  restartBtn.onclick = () => {
    // üìå Thay v√¨ reset lu√¥n ‚Üí h·ªèi l·∫°i ch·∫ø ƒë·ªô ch∆°i
    resetGame();
    document.getElementById('game-container')?.style.setProperty('display', 'none');
    showDifficultyOverlay(true); // ‚úÖ truy·ªÅn true v√¨ g·ªçi t·ª´ trong game
  };
}

const hintBtn = document.getElementById('btn-hint');
if (hintBtn) {
  hintBtn.onclick = handleHintClick;
}

const fullResetBtn = document.getElementById('btn-full-reset');

if (fullResetBtn) {
  fullResetBtn.onclick = () => {
    showResetConfirmationOverlay();
  };
}

const menuBtn = document.getElementById('btn-menu');
if (menuBtn) {
  menuBtn.onclick = () => {
    showReturnToMenuOverlay();
  };
}

// üì¶ C√†i ƒë·∫∑t nhanh trong game
const quickSettingsBtn = document.getElementById('in-game-settings-btn');
const quickSettingsOverlay = document.getElementById('quick-settings-overlay'); // C√†i ƒë·∫∑t c·∫•u h√¨nh trong game
const quickCloseBtn = document.getElementById('quick-close-settings');
const quickToggleSound = document.getElementById('quick-toggle-sound');
const quickBgRadios = document.querySelectorAll('input[name="quick-bg-music"]');
const bgMusic = document.getElementById('bg-music');

if (quickSettingsBtn && quickSettingsOverlay) {
  quickSettingsBtn.onclick = () => {
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i giao di·ªán theo gameState
    quickToggleSound.checked = !!gameState.settings?.sound;
    quickBgRadios.forEach((r) => {
      r.checked = r.value === gameState.settings?.bgMusic;
    });
    quickSettingsOverlay.style.display = 'flex';
  };
}

if (quickCloseBtn) {
  quickCloseBtn.onclick = () => {
    quickSettingsOverlay.style.display = 'none';
  };
}

if (quickToggleSound) {
  quickToggleSound.onchange = () => {
    const on = quickToggleSound.checked;
    gameState.settings.sound = on;
    if (!on && bgMusic) bgMusic.pause();
    else {
      const selected = document.querySelector('input[name="quick-bg-music"]:checked');
      if (selected && selected.value !== 'none') {
        bgMusic.src = `assets/sounds/${selected.value}`;
        bgMusic.loop = true;
        bgMusic.volume = 0.5;
        bgMusic.play().catch(() => {});
      }
    }
  };
}

quickBgRadios.forEach((radio) => {
  radio.onchange = () => {
    const val = radio.value;
    gameState.settings.bgMusic = val;
    if (gameState.settings.sound && val !== 'none') {
      bgMusic.src = `assets/sounds/${val}`;
      bgMusic.loop = true;
      bgMusic.volume = 0.5;
      bgMusic.play().catch(() => {});
    } else {
      bgMusic.pause();
    }
  };
});
